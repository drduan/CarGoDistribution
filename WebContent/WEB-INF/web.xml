<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">

	<display-name>springmvc</display-name>

	<!-- Web容器加载顺序ServletContext-> context->param->listener->filter->servlet -->
	<!-- 指定Spring的配置文件 加载所有的配置文件-->
	<!-- 否则Spring会默认从WEB-INF下寻找配置文件,contextConfigLocation属性是Spring内部固定的 -->
	<!-- 通过ContextLoaderListener的父类ContextLoader的第120行发现CONFIG_LOCATION_PARAM固定为contextConfigLocation -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring.xml,classpath:spring-hibernate.xml,classpath:spring-shiro.xml</param-value>
	</context-param>

	<!-- 解决乱码问题 -->
	<!-- forceEncoding默认为false,此时效果可大致理解为request.setCharacterEncoding("UTF-8") -->
	<!-- forceEncoding=true后,可大致理解为request.setCharacterEncoding("UTF-8")和response.setCharacterEncoding("UTF-8") -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- openSessionInView配置 作用是延迟session关闭到view层  -->
	<!-- 配置Session -->
	<filter>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
		 <init-param>
            <param-name>flushMode</param-name>
            <param-value>AUTO</param-value>
        </init-param>
	</filter>
	<filter-mapping>
		<filter-name>OpenSessionInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 浏览器form表单只支持GET与POST请求，而DELETE、PUT等method并不支持， spring3.0添加了一个过滤器，可以将这些请求转换为标准的http方法，使得支持GET、POST、PUT与DELETE请求， 
		该过滤器为HiddenHttpMethodFilter。带占位符的 URL 是 Spring3.0 新增的功能， 该功能在SpringMVC 向 
		REST 目 标挺进发展过程中具有里程碑的意义。 通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中： URL 
		中的 {xxx} 占位符可以通过@PathVariable("xxx") 绑定到操作方法的入参中。 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<url-pattern>*.json</url-pattern>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>validationCode</servlet-name>
		<servlet-class>com.neusoft.cargo.servlet.ValidationCodeServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>validationCode</servlet-name>
		<url-pattern>/validationCodeServlet.png</url-pattern>
	</servlet-mapping>


	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j2.xml</param-value>
	</context-param>

	<!-- 监听servletContext，启动contextConfigLocation中的spring配置信息 -->

	<!-- 防止spring内存溢出监听器 -->
	<!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
	<!-- 详细描述见http://blog.csdn.net/jadyer/article/details/11991457 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- 实例化Spring容器 -->
	<!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->
	<!-- http://starscream.iteye.com/blog/1107036 -->
	<!-- http://www.davenkin.me/post/2012-10-18/40039948363 -->
	<!-- WebApplicationContextUtils.getWebApplicationContext() -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<filter>
		<!--===============================================shiro过虑器================================================ -->
		<!-- shiro过虑器，DelegatingFilterProx会从spring容器中找shiroFilter代理模式（律师模式） -->

		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 阻止用户重复登陆 -->


	<!-- 配置可以把post请求转为put delete请求的filter -->

	<!-- 配置session超时时间，单位分钟 -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<web:error-page>
		<error-code>404</error-code>
		<location>/error.jsp</location>
	</web:error-page>
	<web:error-page>
		<error-code>500</error-code>
		<location>/error.jsp</location>

	</web:error-page>
	<web:welcome-file-list>
		<web:welcome-file>home.do</web:welcome-file>
	</web:welcome-file-list>
	<error-page>
		<error-code>405</error-code>
		<location>/WEB-INF/405.html</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/500.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/WEB-INF/500.jsp</location>
	</error-page>

</web-app>